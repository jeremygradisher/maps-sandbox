<%- model_class = Area -%>



<div class="page-header">
  <h1><%=t '.title', :default => [:'helpers.titles.new', 'New %{model}'], :model => model_class.model_name.human.titleize %></h1>
</div>

<p>
	*Adding a New Area is simple. Click within the bar on the left and choose the shape 
	you would like to draw. (Polygon, Rectangle or Marker!)
</p>

<div id='map' style="height:500px;"></div>


<script>
	//A Leaflet map has one CRS (and one CRS only)
	var map = L.map('map', {
		crs: L.CRS.Simple, 
		minZoom: -3
	});

	//If working with [y, x] coordinates with something named L.LatLng doesn’t make much sense to you, 
	//you can easily create wrappers for them:
	var yx = L.latLng;

	var xy = function(x, y) {
		if (L.Util.isArray(x)) {    // When doing xy([x, y]);
			return yx(x[1], x[0]);
		}
		return yx(y, x);  // When doing xy(x, y);
	};

	//add a L.ImageOverlay with the map image and its approximate bounds:
	//Think in map units in a grid, and then add your layers (L.ImageOverlays, L.Markers and so on) accordingly.
	var bounds = [xy(0,0), xy(<%= @image.width %>,<%= @image.height %>)];
	
	var image = L.imageOverlay('<%= @image.image_url %>', bounds).addTo(map);

	//add some markers
	//var suite401      = yx(604, 107);

	//L.marker(suite401).addTo(map).bindPopup('Suite 401');

	//map.setView(xy(120, 70), 1);
    map.fitBounds(bounds);
    
    //Let’s define our own icon class containing the shared options, 
    //inheriting from L.Icon! It’s really easy in Leaflet:
    var mapIcon = L.Icon.extend({
			options: {
				shadowUrl: '/images/clear-shadow.png',
				iconSize:     [30, 45], // size of the icon
                shadowSize:   [41, 41], // size of the shadow
                iconAnchor:   [15, 43], // point of the icon which will correspond to marker's location
                shadowAnchor: [12, 38],  // the same for the shadow
                popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
			}
		});


    //Now we can create all three of our leaf icons from this class and use them:
    var greenIcon = new mapIcon({iconUrl: '/images/green-marker.png'}),
    redIcon = new mapIcon({iconUrl: '/images/red-marker.png'}),
    orangeIcon = new mapIcon({iconUrl: '/images/orange-marker.png'}),
    blueIcon = new mapIcon({iconUrl: '/images/blue-marker.png'}),
    lblueIcon = new mapIcon({iconUrl: '/images/lblue-marker.png'}),
    blackIcon = new mapIcon({iconUrl: '/images/black-marker.png'}),
    fadedIcon = new mapIcon({iconUrl: '/images/faded-marker.png'}),
    yellowIcon = new mapIcon({iconUrl: '/images/yellow-marker.png'});    
    

    <% @areas.each do |area| %>
        var <%= 's' + area.name.gsub(/\W\s?/, "") %> = <%= area.coords.html_safe %>;
        
        L.geoJson(<%= 's' + area.name.gsub(/\W\s?/, "") %>, {
        pointToLayer: function (feature, latlng) {
        return L.marker(latlng, {icon: fadedIcon});
        }}).addTo(map).setStyle({fillColor: '#fff200', color: '#fff200', weight: 1});
    <% end %>
</script>

<script>
	// Initialise the FeatureGroup to store editable layers
	var drawnItems = new L.FeatureGroup();
	map.addLayer(drawnItems);


	// Initialise and alter the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
		draw: {
			//These options make up the root object that is used when initialising the Leaflet.draw control.
			position: 'topleft',
			polygon: {
				title: 'Draw a sexy polygon!',
				allowIntersection: false,
				drawError: {
					color: '#00dd00',
					timeout: 1000
				},
				shapeOptions: {
					color: '#00dd00',
				weight: 1
				},
				showArea: true
			},
			polyline:  false,
			rectangle:  {
				shapeOptions: {
					color: '#00dd00',
				weight: 1
				}
			},
			circle: false
        },
		edit: {
			featureGroup: drawnItems
		}
	});
	map.addControl(drawControl);
	
	
	//draw:created - Triggered when a new vector or marker has been created.
	map.on('draw:created', function (e) {
		var type = e.layerType,
			layer = e.layer;
		
		var shape = layer.toGeoJSON()
  		var shape_for_db = JSON.stringify(shape);

		drawnItems.addLayer(layer);
		//trying some things here


		
		//alert(shape_for_db);
		document.getElementById('area_coords').value = shape_for_db;
	});
</script>

<hr style="clear:both;">



<%= render :partial => 'newform' %>

