<%- model_class = Area -%>

<p>
	*Adding a New Area is simple. Click within the bar on the left and choose the shape you would like to draw.
	<br><br>
	*My next move is to try and get those coords to show in the coords field below in the form. I am WIP there now.
	<br><br>
	**I don't quite understand it yet, but I am close. I need to be able to save those shapes and serve them back.
</p>

<div class="page-header">
  <h1><%=t '.title', :default => [:'helpers.titles.new', 'New %{model}'], :model => model_class.model_name.human.titleize %></h1>
</div>

<div id='map' style="height:500px;"></div>


<script>
	//A Leaflet map has one CRS (and one CRS only)
	var map = L.map('map', {
		crs: L.CRS.Simple, 
		minZoom: -3
	});

	//If working with [y, x] coordinates with something named L.LatLng doesnâ€™t make much sense to you, 
	//you can easily create wrappers for them:
	var yx = L.latLng;

	var xy = function(x, y) {
		if (L.Util.isArray(x)) {    // When doing xy([x, y]);
			return yx(x[1], x[0]);
		}
		return yx(y, x);  // When doing xy(x, y);
	};

	//add a L.ImageOverlay with the map image and its approximate bounds:
	//Think in map units in a grid, and then add your layers (L.ImageOverlays, L.Markers and so on) accordingly.
	var bounds = [xy(0,0), xy(<%= @image.width %>,<%= @image.height %>)];
	
	var image = L.imageOverlay('<%= @image.image_url %>', bounds).addTo(map);

	//add some markers
	//var suite401      = yx(604, 107);

	//L.marker(suite401).addTo(map).bindPopup('Suite 401');

	//map.setView(xy(120, 70), 1);
    map.fitBounds(bounds);


</script>

<script>
	// Initialise the FeatureGroup to store editable layers
	var drawnItems = new L.FeatureGroup();
	map.addLayer(drawnItems);

	// Initialise and alter the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
		draw: {
			//These options make up the root object that is used when initialising the Leaflet.draw control.
			position: 'topleft',
			polygon: {
				title: 'Draw a sexy polygon!',
				allowIntersection: false,
				drawError: {
					color: '#b00b00',
					timeout: 1000
				},
				shapeOptions: {
					color: '#bada55'
				},
				showArea: true
			},
			polyline: {
				metric: false
			},
			circle: {
				shapeOptions: {
					color: '#662d91'
				}
			}
		},
		edit: {
			featureGroup: drawnItems
		}
	});
	map.addControl(drawControl);


	//draw:created - Triggered when a new vector or marker has been created.
	map.on('draw:created', function (e) {
		var type = e.layerType,
			layer = e.layer;
		
		var shape = layer.toGeoJSON()
  		var shape_for_db = JSON.stringify(shape);

		if (type === 'marker') {
			layer.bindPopup('A popup!');
		}
		
		if (type === 'polygon') {
			layer.bindPopup('OK - I can create a pop-up!!!');
		}

		drawnItems.addLayer(layer);
		//trying some things here


		
		//alert(shape_for_db);
		document.getElementById('area_coords').value = shape_for_db;
	});
</script>

<hr style="clear:both;">



<%= render :partial => 'newform' %>

