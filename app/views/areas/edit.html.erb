<%- model_class = Area -%>

<p>
	*Edit Area is simple. You can re-click on the map in another area to get it to move,
	or you can grab it and drag it.<br><br>
	
	**The color of the marker does not change until you change the status and save/update.
</p>

<div class="page-header">
  <h1><%=t '.title', :default => [:'helpers.titles.edit', 'Edit %{model}'], :model => model_class.model_name.human.titleize %></h1>
</div>

<div id='map' style="height:500px;"></div>


<script>
	//A Leaflet map has one CRS (and one CRS only), that can be changed when creating the map. 
	//In a CRS.Simple, one horizontal map unit is mapped to one horizontal pixel, 

	var map = L.map('map', {
		crs: L.CRS.Simple,
		minZoom: -3
	});

	//If working with [y, x] coordinates with something named L.LatLng doesn’t make much sense to you, 
	//you can easily create wrappers for them:
	var yx = L.latLng;

	var xy = function(x, y) {
		if (L.Util.isArray(x)) {    // When doing xy([x, y]);
			return yx(x[1], x[0]);
		}
		return yx(y, x);  // When doing xy(x, y);
	};
	//Now we can add a few stars and even a navigation line with [x, y] coordinates! (Shown down the page a bit)

	//Then we can just add a L.ImageOverlay with the starmap image and its approximate bounds:
	var bounds = [xy(0,0), xy(<%= @image.width %>,<%= @image.height %>)];
	//var image = L.imageOverlay('/images/demo-lease-plan.png', bounds).addTo(map);
	var image = L.imageOverlay('<%= @image.image_url %>', bounds).addTo(map);

	//map.setView(xy(120, 70), 1);
    map.fitBounds(bounds);
    
    //Let’s define our own icon class containing the shared options, 
    //inheriting from L.Icon! It’s really easy in Leaflet:
    var mapIcon = L.Icon.extend({
			options: {
				shadowUrl: '/images/clear-shadow.png',
				iconSize:     [30, 45], // size of the icon
                shadowSize:   [41, 41], // size of the shadow
                iconAnchor:   [15, 43], // point of the icon which will correspond to marker's location
                shadowAnchor: [12, 38],  // the same for the shadow
                popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
			}
		});

    //Now we can create all three of our leaf icons from this class and use them:
    var greenIcon = new mapIcon({iconUrl: '/images/green-marker.png'}),
    redIcon = new mapIcon({iconUrl: '/images/red-marker.png'}),
    orangeIcon = new mapIcon({iconUrl: '/images/orange-marker.png'}),
    blueIcon = new mapIcon({iconUrl: '/images/blue-marker.png'}),
    lblueIcon = new mapIcon({iconUrl: '/images/lblue-marker.png'}),
    blackIcon = new mapIcon({iconUrl: '/images/black-marker.png'}),
    fadedIcon = new mapIcon({iconUrl: '/images/faded-marker.png'}),
    yellowIcon = new mapIcon({iconUrl: '/images/yellow-marker.png'});
    
    <% @areas.each do |area| %>
        var <%= 's' + area.name.gsub(/\W\s?/, "") %> = <%= area.coords.html_safe %>;
        
        L.geoJson(<%= 's' + area.name.gsub(/\W\s?/, "") %>, {
        pointToLayer: function (feature, latlng) {
        return L.marker(latlng, {icon: fadedIcon});
        }}).addTo(map).setStyle({fillColor: '#dddd00', color: '#dddd00', weight: 1});

    <% end %>


    var popup = L.popup();


	var <%= 's' + @area.name.gsub(/\W\s?/, "") %> = <%= @area.coords.html_safe %>;

	//L.geoJson(<%#= 's' + @area.name.gsub(/\W\s?/, "") %>).addTo(map);
	//this was absurbed into the next variable

	// Initialise the FeatureGroup to store editable layers
	var drawnItems = L.geoJson(<%= 's' + @area.name.gsub(/\W\s?/, "") %>);
	map.addLayer(drawnItems);
	
	drawnItems.setStyle({<% if @area.status == 'Leased' %>fillColor: '#00dd00', color: '#00dd00', weight: 1<% else %>fillColor: '#dd0000', color: '#dd0000', weight: 1<% end %>});

	// Initialise and alter the draw control and pass it the FeatureGroup of editable layers
	var drawControl = new L.Control.Draw({
		draw: {
			//These options make up the root object that is used when initialising the Leaflet.draw control.
			position: 'topleft',
			polygon: false,
			polyline: false,
			rectangle: false,
			circle: false,
			marker: false
		},
		edit: {
			featureGroup: drawnItems
		}
	});
	map.addControl(drawControl);

	

	//draw:created - Triggered when a new vector or marker has been created.
	map.on('draw:edited', function (e) {
		var layers = e.layers;
		
    	layers.eachLayer(function (layer) {
	        //do whatever you want, most likely save back to db
	      		//var type = e.layerType,
				//layer = e.layer;
			
			var shape = layer.toGeoJSON()
	  		var shape_for_db = JSON.stringify(shape);
	
			document.getElementById('area_coords').value = shape_for_db;
	    });
	});
</script>

<hr style="clear:both;">

<%= render :partial => 'form' %>


